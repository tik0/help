#!/opt/help/helpingHelper
-------------------------------------------------------------------------------
Bash File Testing

-b filename - Block special file  
-c filename - Special character file  
-d directoryname - Check for directory existence  
-e filename - Check for file existence, regardless of type (node, directory, socket, etc.)  
-f filename - Check for regular file existence not a directory  
-G filename - Check if file exists and is owned by effective group ID.  
-g filename - true if file exists and is set-group-id.  
-k filename - Sticky bit  
-L filename - Symbolic link  
-O filename - True if file exists and is owned by the effective user id.  
-r filename - Check if file is a readable  
-S filename - Check if file is socket  
-s filename - Check if file is nonzero size  
-u filename - Check if file set-user-id bit is set  
-w filename - Check if file is writable  
-x filename - Check if file is executable 

How to use:

    file=./file
    if [ -e "$file" ]; then
      echo "File exists"
    else 
      echo "File does not exist"
    fi 

A test expression can be negated by using the `!` operator

    file=./file
    if [ ! -e "$file" ]; then
      echo "File does not exist"
    else 
      echo "File exists"
    fi 

String compare:

    s1=helping
    s2=help
    if [[ $s1 == *"$s2"* ]]; then
      echo "${s2}" is included in ${s1}
    fi

    
-------------------------------------------------------------------------------

C-Style for-loops:

Common for-loop
    for (( <EXPR1> ; <EXPR2> ; <EXPR3> )); do
      <LIST>
    done
As a special case: without semicolon after ((...))
    for (( <EXPR1> ; <EXPR2> ; <EXPR3> )) do
      <LIST>
    done
Alternative, historical and undocumented syntax
    for (( <EXPR1> ; <EXPR2> ; <EXPR3> )) {
      <LIST>
    }
Example 0
    for ((x = 0 ; x <= 100 ; x++)); do
      echo "Counter: $x"
    done
Example 1
    for ((x = 0 ; x <= 100 ; x += 10)); do
      echo "Counter: $x"
    done